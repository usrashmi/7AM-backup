{
	"info": {
		"_postman_id": "6c33a511-267c-44d7-ae02-90ce7fbb3d9b",
		"name": "ENV VARIABLES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Smoke TC",
			"item": [
				{
					"name": "HTML-API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// java-scripts //chai library //english lang\r",
									"// order of execution in postman : API Request --> API Response --> Tests\r",
									"\r",
									"pm.test(\"Verify if 200 is the response code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not a JSON body\", function () {\r",
									"     pm.response.to.not.have.jsonBody()\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if OK is the response message\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if mandatory strings are present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"html\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Herman Melville - Moby-Dick\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"gunicorn/19.9.0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/html",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"html"
							]
						}
					},
					"response": []
				},
				{
					"name": "XML-API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if 200 is the response code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response message\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if mandatory strings are present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"xml\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Sample Slide Show\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Wake up to WonderWidgets!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"gunicorn/19.9.0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/xml",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON-API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if 200 is the response code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response message\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if mandatory strings are present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"slideshow\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Wake up to WonderWidgets!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"gunicorn/19.9.0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/json",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"json"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEXT-API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if 200 is the response code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response message\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if mandatory strings are present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User-agent\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Disallow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"gunicorn/19.9.0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envProtocol}}://{{envBaseURL}}/robots.txt",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envBaseURL}}"
							],
							"path": [
								"robots.txt"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Verify if the response doesn't contains 4xx & 5xx errors\", function () {",
					"    pm.response.to.not.be.error;",
					"});",
					"",
					"pm.test(\"Verify if the response contains 2xx success code\", function () {",
					"    pm.response.to.be.success;",
					"});"
				]
			}
		}
	]
}